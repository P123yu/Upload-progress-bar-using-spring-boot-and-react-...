import axios from "axios";
import { useState } from "react";

function FileUploadProgressBar() {
  const [progress, setProgress] = useState(0);

  const handleFileUpload = (file) => {
    const formData = new FormData();
    formData.append("empName", "piyush");
    formData.append("file", file);

    axios
      .post("http://localhost:8080/file/createImage", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        onUploadProgress: (progressEvent) => {
          const percentCompleted = Math.round(
            (progressEvent.loaded * 100) / progressEvent.total
          );
          setProgress(percentCompleted);
        },
      })
      .then((response) => {
        console.log("Upload success", response.data);
        alert("completed");
      })
      .catch((error) => {
        console.error("Upload error", error);
      });
  };

  return (
    <div>
      <input
        type="file"
        onChange={(e) => {
          if (e.target.files.length > 0) {
            handleFileUpload(e.target.files[0]);
          }
        }}
      />
      <div>Upload Progress: {progress}%</div>
    </div>
  );
}

export default FileUploadProgressBar;


======================================================================== SPRING BOOT =============================================================================


// controller 


  @PostMapping("/createImage")
    public ResponseEntity<Image>createImage(@RequestParam String empName,@RequestParam MultipartFile file) throws IOException {
        Image image=imageService.createImageFile(empName,file);
        return image !=null ? ResponseEntity.ok(image) : ResponseEntity.badRequest().build();
    }


// service

 Image createImageFile(String empName, MultipartFile file) throws IOException;


// service.impl

 @Autowired
    public ImageRepository imageRepository;


    @Override
    public Image createImageFile(String empName, MultipartFile file) throws IOException {
         Image image=Image.builder().empName(empName).fileFieldName(file.getName())
                .originalUploadFileName(file.getOriginalFilename())
                .fileData(file.getBytes()).build();
         return imageRepository.save(image);
    }


// or 



// repository

package com.image.Image.repository;

import com.image.Image.model.Image;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ImageRepository extends JpaRepository<Image,Long> {
}



// model

package com.image.Image.model;

import jakarta.persistence.*;
import lombok.*;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@ToString

@Entity
public class Image {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String empName;

    private String fileFieldName;

    private String originalUploadFileName;

    @Column(columnDefinition = "BYTEA")
    private byte[] fileData;
}



// ===============================    post and get formData ========================================================================================================================

package com.image.Image.service.impl;

import com.image.Image.dto.ImageDto;
import com.image.Image.model.Image;
import com.image.Image.repository.ImageRepository;
import com.image.Image.service.ImageService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Base64;

@Service
public class ImageServiceImpl implements ImageService {


    @Autowired
    public ImageRepository imageRepository;


    @Override
    public Image createImageFile(String empName, MultipartFile file) throws IOException {
         Image image=Image.builder().empName(empName).fileFieldName(file.getName())
                .originalUploadFileName(file.getOriginalFilename())
                .fileData(file.getBytes()).build();
         return imageRepository.save(image);
    }



    @Override
    public ImageDto getImageFile(Long id) {
        Image imageObj=imageRepository.findById(id).orElse(null);
        if(imageObj !=null && imageObj.getFileData() !=null){
            String base64Image=Base64.getEncoder().encodeToString(imageObj.getFileData());
            return ImageDto.builder().id(imageObj.getId()).empName(imageObj.getEmpName())
                    .fileFieldName(imageObj.getFileFieldName())
                    .originalUploadFileName(imageObj.getOriginalUploadFileName())
                    .fileData(base64Image).build();
        }
        return null;
    }



    @Override
    public Image getDirectImageFile(Long id) {
        return imageRepository.findById(id).orElse(null);
    }



    // use inputStream() to fetch images from our pc as we don't have cloud


    // Replace this with the path to your file
    String filePath = "C:\\Users\\piyush_kumar\\Desktop\\image file\\login.png";


    public void fetchInputStreamBytes() {

        File file = new File(filePath);

        try (InputStream inputStream = new FileInputStream(file)) {
            System.out.println("Size (bytes): " + inputStream.available());

            // Read and print first 5 bytes
            byte[] buffer = new byte[5];
            inputStream.read(buffer);
            for (byte b : buffer) {
                System.out.print(b + " ");
            }

        } catch (Exception e) {
            System.out.println("Something went wrong:");
            e.printStackTrace();
        }

    }


    // upload file as stream into pc rather than uploading as byte[]

    String uploadDir = "C:\\Users\\piyush_kumar\\Desktop\\image file";



    public String createImageIntoPcDirectory(MultipartFile file) throws IOException {
        // Create the folder if it doesnâ€™t exist
        File dir = new File(uploadDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }

        // Destination path
        Path filePath = Paths.get(uploadDir, file.getOriginalFilename());


        // for saving image into pc using byte[]
        Files.write(filePath, file.getBytes());


        // for saving image into pc using inputStream()

//        // Use InputStream to write file
//        try (InputStream inputStream = file.getInputStream()) {
//            Files.copy(inputStream, filePath, StandardCopyOption.REPLACE_EXISTING);
//        }

        return filePath.toString();
    }



    // getImageAsBase64FromDisk using getBytes()


    public String getImageAsBase64(String filename) throws IOException {
        Path filePath = Paths.get(uploadDir, filename);
        byte[] imageBytes = Files.readAllBytes(filePath);
        String base64 = Base64.getEncoder().encodeToString(imageBytes);
        return base64;
    }


    // getImageAsBase64FromDisk using inputStream()


    public String getImageAsBase64FromDiskUsingStream(String filename) throws IOException {
        Path filePath = Paths.get(uploadDir, filename);

        // Read using InputStream
        byte[] bytes;
        try (InputStream inputStream = new FileInputStream(filePath.toFile())) {
            bytes = inputStream.readAllBytes();
        }

        // Convert to Base64
        String base64 = Base64.getEncoder().encodeToString(bytes);

        return base64;

    }








//    public void fetchInputStreamBytes() {
//
//        File file = new File(filePath);
//
//        try (InputStream inputStream = new FileInputStream(file)) {
//            System.out.println("Size (bytes): " + inputStream.available());
//
//
//
//        } catch (Exception e) {
//            System.out.println("Something went wrong:");
//            e.printStackTrace();
//        }
//
//    }










}






